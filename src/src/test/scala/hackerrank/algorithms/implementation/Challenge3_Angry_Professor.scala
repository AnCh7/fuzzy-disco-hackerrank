package hackerrank.algorithms.implementation.scala

import hackerrank.helper.scala.{Console, _}
import org.junit.runner.RunWith
import org.scalatest.FunSuite
import org.scalatest.junit.JUnitRunner

import scala.collection.mutable

@RunWith(classOf[JUnitRunner])
class Challenge3_Angry_Professor extends FunSuite {

  object Solution {

    //import java.util.Scanner

    implicit def intWithTimes(n: Int) = new {
      def times(f: => Unit) = 1 to n foreach { _ => f }
    }

    def main(args: Array[String]) {
      val sc = new Scanner(System.in)
      val T = sc.nextLine().toInt
      if (T >= 1 && T <= 10) {
        T times {
          val input = sc.nextLine().split(" ").map(x => x.toInt)
          val students = input.head
          if (students <= 1000 && students >= 1) {
            val threshold = input.last
            if (threshold <= students && threshold >= 1) {
              val arrives = sc.nextLine().split(" ").map(x => x.toInt)
              val isCanceled = arrives.count(x => x <= 0) < threshold
              if (isCanceled) Console.println("YES")
              else Console.println("NO")
            }
          }
        }
      }
    }
  }

  test("Run solution") {
    val inputData = mutable.Queue(
      "2",
      "4 3",
      "-1 -3 4 2",
      "4 2",
      "0 -1 2 1"
    )

    val inputStream = new InputStream()
    inputStream.setInputData(inputData)
    System.setIn(inputStream)

    val outputData = mutable.Queue(
      "YES",
      "NO"
    )

    Console.setOutputData(outputData)
    Solution.main(null)
  }

  test("Run solution 4") {
    val inputData = mutable.Queue(
      "10",
      "200 133",
      "0 -14 -1 -38 -37 18 -73 45 93 -7 -46 -49 -48 -73 -39 -76 -77 -64 22 -8 51 69 -40 -81 -92 -69 -46 96 23 75 61 5 95 -69 -76 -29 55 -57 66 81 79 49 -24 72 -16 -61 -51 16 40 -68 66 -96 -48 -69 96 -77 -5 53 72 -29 72 -18 61 26 -23 70 -96 62 24 63 35 47 18 22 -25 83 47 -78 87 62 51 51 -2 43 50 98 -50 29 -98 12 8 -78 -49 63 64 -51 -9 14 20 90 68 -7 -39 -40 -93 17 -51 -8 55 -41 1 39 46 26 -16 -89 10 -55 -90 -42 -3 88 -11 11 -71 91 96 87 -36 -62 34 -89 4 97 96 29 -56 -58 -65 86 -74 -61 -8 66 66 49 35 97 34 86 90 82 85 14 -14 40 -30 -64 54 86 62 -72 -25 -89 20 42 92 9 -69 -80 -27 24 -74 99 70 52 25 82 -98 -63 47 -32 -34 -21 -16 -38 26 -5 3 -32 95 58 12 23 64 32 -48 -7 58 37",
      "200 28",
      "-59 28 -46 -95 32 -82 -96 -28 39 -43 67 61 -70 -38 -75 -20 56 -98 38 -74 -29 28 -31 35 79 77 90 47 -32 -10 -51 -93 -36 -9 89 -49 91 -95 -38 97 -13 16 -65 -68 -53 -56 14 -15 97 76 11 8 55 -77 -85 -11 1 -6 42 67 -53 -3 -77 69 94 64 -24 60 -27 -25 64 15 15 -84 -95 57 -27 20 31 82 -88 83 70 -91 -32 66 -4 -63 -54 -81 -51 2 -2 -87 -65 11 -68 17 -89 92 -29 70 -91 -57 -37 99 80 -71 28 -20 -81 -50 -29 -92 80 -43 -47 94 -3 -88 93 -81 -41 12 -63 67 15 -46 89 14 -27 -30 -75 66 -80 71 -42 3 -57 -56 47 -17 45 -58 53 7 -33 -8 -17 92 -28 -75 72 57 -45 53 41 58 85 24 -92 -72 -72 38 6 91 50 9 48 55 -84 89 79 -16 15 -55 -76 -85 -11 -95 -10 56 57 -86 -35 -3 49 50 40 97 -11 15 84 93 -27 17 -74 -1 -90 -41",
      "200 178",
      "-30 3 80 59 85 3 0 -70 -82 64 85 -73 79 -61 -89 -10 -46 82 88 -66 -57 -3 -24 -5 -84 -31 -59 89 65 -51 -8 78 28 85 54 -45 -21 69 -26 4 95 -31 40 49 -23 16 14 -90 7 -62 -79 77 60 97 24 0 -89 -78 -4 -91 -79 -11 54 88 29 -79 63 60 -54 14 64 50 -98 87 59 33 37 -84 99 -58 28 -89 -46 -18 59 79 -99 -29 -9 3 46 58 -33 -27 20 -13 27 91 -3 -25 -42 38 -85 -42 87 -66 -81 -69 -72 99 38 40 -14 -90 92 -33 72 -79 -95 -4 18 68 99 -19 -89 15 -83 -44 -38 19 -2 69 28 -83 -22 -57 -62 -45 -66 37 34 83 -60 67 66 33 91 -94 -4 46 17 -71 -33 93 -84 55 -34 -88 71 -97 -94 58 -85 60 -82 20 13 -31 12 46 58 -67 -44 91 -63 9 -19 -98 23 98 16 58 61 -28 -18 70 80 -73 45 -96 -53 -70 24 -33 -27 -5 49 -78 57 36",
      "200 176",
      "-65 -29 -93 37 99 24 18 -9 25 23 -41 -51 -96 -91 -94 -78 -97 -53 53 96 -89 33 -18 77 -86 -16 -92 -82 28 15 -75 -34 5 -14 34 15 -35 82 -94 96 13 11 -31 49 -20 34 -61 -20 12 77 49 21 45 37 -16 -24 -49 -90 81 -91 -7 1 47 -87 -59 10 60 -44 -87 -49 -18 -88 -12 99 69 -51 69 97 77 79 0 -49 73 18 27 -20 96 65 39 -6 8 89 -14 97 74 81 18 86 -76 55 27 -2 -36 -36 -36 87 4 73 -66 63 51 66 -78 -64 -61 -11 -99 -16 -32 14 -99 -65 -30 -26 65 -37 37 -89 8 -23 77 15 51 -15 -88 -56 -82 94 65 -9 62 51 1 68 46 -36 -29 -3 86 15 99 65 -46 94 -81 -45 -53 95 89 -68 -58 10 -59 -67 83 -72 7 15 -50 -16 -64 -78 -10 24 -89 34 1 35 61 -58 90 -30 -21 -50 -59 6 -31 45 -10 -40 65 0 74 -27 -42 -83 68 -29 -63 -64",
      "200 123",
      "-81 -94 17 -15 -81 -17 -68 -26 -47 91 84 61 71 -42 -94 -95 -72 -2 -5 -59 10 85 85 86 -80 -17 85 42 -75 -54 2 -49 91 -67 20 86 -7 -13 87 -29 -80 32 77 27 63 -26 -35 43 31 -26 89 87 35 41 -4 42 17 2 53 -50 63 -86 57 -76 40 92 18 -78 -84 -80 42 -76 -49 -57 60 -71 -88 -73 -38 -86 -55 13 -62 -79 63 -90 -82 16 97 -86 84 -85 -18 -70 -12 88 39 -93 -44 51 -84 -64 59 2 -57 -19 2 15 -67 -30 46 52 -71 -90 -70 -27 86 -76 -76 -6 -72 -27 86 47 -32 -37 47 -15 87 -38 -98 -15 12 -81 22 26 17 -21 0 9 98 14 -88 -16 -38 36 75 -24 -46 -28 -97 67 -11 22 -9 -47 -82 -4 94 1 78 -72 -92 41 54 -59 -27 -70 67 -2 28 -35 15 84 -64 -46 -74 48 15 -57 -62 24 -95 -80 -40 43 83 -31 23 -60 -53 82 -24 -46 -24 -64 -23 -28 -36 86",
      "200 177",
      "78 79 39 -36 -52 61 -19 77 69 27 56 88 -4 -65 43 80 -11 50 59 29 -33 -94 39 18 56 -68 65 -43 -58 1 -59 27 46 -24 -19 68 49 60 86 -1 -76 -11 30 -63 67 -94 51 0 -2 -2 -31 78 36 20 -17 -70 43 -40 -40 -66 20 38 -85 -20 -16 12 -96 27 -81 -60 73 96 15 93 92 -68 23 88 49 99 -35 12 -54 -68 -43 38 10 36 23 -34 -93 79 60 -77 28 27 -40 98 -31 -34 95 42 59 84 12 49 -72 73 0 46 31 95 -66 -22 -60 -24 81 66 49 26 -72 -70 60 -28 50 -40 -53 -4 -80 -68 -36 53 -63 -14 73 29 -20 -41 98 -92 48 29 -71 72 -65 -96 -85 -74 72 64 -81 -42 -96 -85 -57 -43 -61 -59 63 -87 24 33 37 -10 96 -7 -72 34 -37 -64 48 -52 -32 -45 -94 75 -20 29 68 -20 18 -45 -29 -12 -50 61 83 -59 76 15 -40 -42 -3 -19 -66 -87 -18 28 63 67",
      "200 114",
      "-3 22 -74 39 -19 39 37 51 -81 96 12 -98 44 79 58 25 -10 85 78 82 -10 -81 -40 56 -78 -91 -86 -3 31 -44 -47 54 -70 -93 19 -98 -1 -77 -16 -66 90 -85 50 -59 -76 -26 -73 32 -24 -44 -53 25 25 99 -39 -36 74 -58 62 -9 73 -13 67 -94 -23 87 84 34 -18 -51 -2 -39 60 52 -19 -61 48 -43 -72 -59 -79 75 -62 -24 46 -89 66 -76 -31 50 93 -95 -90 9 -79 62 18 25 51 -12 81 -98 -86 -74 -7 20 -92 -94 5 -49 23 98 -2 -73 -28 -3 -91 57 -81 -47 60 -93 34 86 -43 27 0 -60 52 59 71 -90 21 -44 82 -94 10 46 80 -35 -73 42 -91 -27 -89 23 53 -27 64 -80 -62 -41 67 68 -25 -22 69 -23 72 55 -40 25 96 72 23 -7 -80 -61 -41 -46 84 16 -89 -65 -41 26 -51 79 -56 7 57 -69 -68 -36 -60 27 -54 -50 82 57 -88 56 -40 38 40 28 -65 38 -81 94",
      "200 194",
      "66 93 98 -20 -1 29 -48 -31 57 -77 46 -44 -60 25 -30 44 -14 -11 50 -85 -39 -96 -32 36 61 -48 92 -91 15 -5 67 -47 90 46 42 96 -51 73 -24 -77 74 46 71 -18 58 -36 77 -60 -94 12 42 69 -52 81 -3 67 -36 -95 -54 -46 -89 39 18 -85 9 0 57 -49 64 91 -41 49 -75 37 -10 -42 -69 -17 -84 51 4 -50 -73 -75 -34 56 -28 -4 -2 -85 76 -11 13 85 -86 -95 40 -56 -97 -2 -2 -58 16 38 4 -30 2 -82 -25 65 57 6 -6 15 -46 -38 76 82 -10 15 43 51 43 -61 -1 85 39 -12 -54 -52 44 0 -90 70 55 -67 83 96 -51 0 -88 -67 -76 -76 58 34 -22 28 21 13 35 78 -98 -50 -37 6 -87 57 -5 -98 14 19 19 -49 49 20 94 55 25 -45 7 92 30 -62 -34 3 44 37 -73 7 52 -59 26 42 -24 -66 -43 30 -59 13 -4 94 91 -16 69 -91 -3 19 -16 -84",
      "200 141",
      "96 54 -19 34 -2 -59 94 18 63 53 97 -7 20 62 72 -36 25 42 -40 62 79 -97 -67 -88 61 -18 45 -40 -97 -29 -20 90 -8 46 -60 95 33 17 12 -82 -47 36 77 61 31 44 -8 1 -18 -70 60 -70 -10 46 45 99 81 -88 16 -85 -92 -3 67 21 -55 -15 -57 61 -78 -41 -39 68 80 35 58 95 1 54 54 57 67 77 62 95 1 16 -81 65 -92 57 72 4 -3 -45 -87 71 27 -83 -43 82 -67 38 34 -61 8 81 74 -6 -96 -39 -58 90 -15 -26 -3 4 10 70 97 -27 -53 38 45 9 99 29 -63 -94 96 -89 33 -74 87 -44 -80 -94 79 14 -28 -23 24 89 -76 17 57 -76 52 -90 0 -77 6 -66 56 67 56 68 94 19 94 47 -95 -97 78 92 23 -63 -92 -19 10 89 28 -98 -15 -97 -5 64 -72 5 50 -85 -18 6 77 63 -16 57 -61 -20 -24 -90 14 -87 17 92 -41 -96 -25 73 -32 94",
      "200 150",
      "2 -14 -36 -21 97 57 -97 -80 94 -64 -35 -26 51 -36 7 46 -52 44 96 10 -46 -33 20 -64 22 -19 -48 -51 -64 4 28 85 15 72 -48 60 1 -42 -10 -39 -36 94 60 39 86 -48 98 99 -16 -28 6 10 -34 -33 12 81 35 88 -74 -71 23 26 -6 -86 49 38 -6 14 5 -89 -72 21 -46 -54 89 -32 97 -37 -84 -29 -93 -40 -20 -92 -2 -47 3 33 30 -74 -17 -35 66 22 99 -88 71 91 -35 -68 68 -64 36 26 41 37 7 25 -44 -28 -50 35 -96 12 14 -22 48 58 40 2 85 -92 11 -70 -16 2 -66 -40 68 -46 86 68 59 -23 -63 -33 65 93 95 -84 13 31 -28 -45 76 30 64 53 -29 27 -53 93 90 47 1 -50 21 -45 -56 -45 -87 -51 -30 79 -32 4 70 4 -36 -99 86 -56 86 9 97 -79 86 -87 39 28 76 58 -34 60 -70 -65 64 -16 27 96 85 12 -11 40 70 74 -4 46 -51 66"
    )

    val inputStream = new InputStream()
    inputStream.setInputData(inputData)
    System.setIn(inputStream)

    val outputData = mutable.Queue(
      "YES",
      "NO",
      "YES",
      "YES",
      "YES",
      "YES",
      "YES",
      "YES",
      "YES",
      "YES"
    )

    Console.setOutputData(outputData)
    Solution.main(null)
  }
}